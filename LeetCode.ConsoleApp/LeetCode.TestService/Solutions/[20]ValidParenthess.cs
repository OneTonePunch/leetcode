using Newtonsoft.Json;
using System.Diagnostics;
using System.Numerics;

namespace LeetCode.TestService.Solutions
{
    public class ValidParenthess : ITestRunner
    {
        public string Name { get; } = "[20] Valid Parenthess";
        
        public TestJournal Run()
        {
            var journal = new TestJournal(Name);

            var inputs = GetInputs();
            var stopWatch = new Stopwatch();
            foreach (var input in inputs) 
            {
                try
                {
                    stopWatch.Start();
                    //Best solution
                    var result = IsValidMarkers(input);
                    stopWatch.Stop();

                    var journalItem = new TestJournalItem
                    {
                        Input = JsonConvert.SerializeObject(input),
                        Output = JsonConvert.SerializeObject(result),
                        Ellapsed = stopWatch.ElapsedTicks
                    };

                    journal.Add(journalItem);
                }
                catch (Exception ex)
                {
                    var journalItem = new TestJournalItem
                    {
                        Input = JsonConvert.SerializeObject(input),
                        Ellapsed = stopWatch.ElapsedTicks,
                        Error = ex.ToString(),
                    };

                    journal.Add(journalItem);
                }
                finally 
                {
                    stopWatch.Stop();
                }
                
            }


            return journal;

        }

        private List<string> GetInputs()
        {
            return new List<string>
            {
                "()[]{}",
                "()",
                "{[]}",

                "(]",
                "((]]))[[",
                "([)]", 
                "]"
            };
        }

        private bool IsValidBigInt(string s)
        {
            var openBrackets = "([{";
            var closeBrackets = ")]}";
            BigInteger history = 0;
            var index = 0;
            while (index < s.Length)
            {
                int openBracketIndex = openBrackets.IndexOf(s[index]) + 1;
                if (openBracketIndex > 0)
                {
                    history = history * 10 + openBracketIndex;
                    index++;
                    continue;
                }

                int closeBracketIndex = closeBrackets.IndexOf(s[index]) + 1;
                if (closeBracketIndex > 0)
                {
                    if (history <= 0)
                        return false;

                    var lastOpen = history % 10;
                    if (lastOpen != closeBracketIndex)
                        return false;

                    history = history / 10;
                }

                index++;
            }

            return history == 0;
        }

        private bool IsValidMarkers(string s)
        {
            var openBrackets = "([{";
            var closeBrackets = ")]}";
            var markers = "012";
            var markersHistory = "";
            var index = 0;
            while (index < s.Length)
            {
                int openBracketIndex = openBrackets.IndexOf(s[index]);
                if (openBracketIndex >= 0)
                {
                    markersHistory += markers[openBracketIndex];
                    index++;
                    continue;
                }

                int closeBracketIndex = closeBrackets.IndexOf(s[index]);
                if (closeBracketIndex >= 0)
                {
                    if (markersHistory.Length == 0)
                        return false;

                    var lastOpenMarker = markersHistory[markersHistory.Length - 1];
                    var currentMarker = markers[closeBracketIndex];

                    if (lastOpenMarker != currentMarker)
                        return false;

                    markersHistory = markersHistory.Remove(markersHistory.Length - 1);
                }

                index++;
            }

            return string.IsNullOrEmpty(markersHistory);
        }

        private bool IsValidBigArray(string s)
        {
            var openBrackets = "([{";
            var closeBrackets = ")]}";
            var index = 0;
            var bracketsBufferIndexes = new int[10001];
            var currentIndexBuffer = -1;
            while (index < s.Length)
            {
                int openIndex = openBrackets.IndexOf(s[index]) + 1;
                if (openIndex > 0)
                {
                    currentIndexBuffer++;
                    bracketsBufferIndexes[currentIndexBuffer] = openIndex;
                    index++;
                    continue;
                }

                int closeIndex = closeBrackets.IndexOf(s[index]) + 1;
                if (closeIndex > 0)
                {
                    int lastOpenIndex = -1;
                    if (currentIndexBuffer >= 0)
                        lastOpenIndex = bracketsBufferIndexes[currentIndexBuffer];
                    else
                        return false;

                    if (lastOpenIndex <= 0 || closeIndex != lastOpenIndex)
                        return false;
                    else
                    {
                        bracketsBufferIndexes[currentIndexBuffer] = 0;
                        currentIndexBuffer--;
                        index++;
                        continue;
                    }

                }

                index++;
            }

            return currentIndexBuffer < 0;
        }

        private bool IsValid(string s)
        {
            var open = "([{";
            var close = ")]}";
            var index = 0;
            var opens = new int[0];
            while (index < s.Length)
            {
                int openIndex = open.IndexOf(s[index]);
                if (openIndex >= 0)
                {
                    Array.Resize(ref opens, opens.Length + 1);
                    opens[opens.Length - 1] = openIndex;
                    index++;
                    continue;
                }

                int closeIndex = close.IndexOf(s[index]);
                if (closeIndex >= 0)
                {
                    if (opens.Length == 0)
                        return false;

                    int lastOpenIndex = opens.Last();
                    if (lastOpenIndex < 0 || closeIndex != lastOpenIndex)
                        return false;
                    else
                    {
                        Array.Resize(ref opens, opens.Length - 1);
                        index++;
                        continue;
                    }

                }

                index++;
            }
            return opens.Length == 0;
        }
    }
}
